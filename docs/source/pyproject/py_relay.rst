Control Another Circuit
=======================

在日常生活中我们按开关就可以对台灯进行点亮或者关闭，
但是，如果想用Pico控制台灯，让台灯能在十分钟后自动关闭，该如何做呢？

一个继电器就能帮你完成这个设想。

继电器实际上是一种特殊的开关，它受一方电路控制（通常是低压电路），用于控制另一方电路（通常是高压电路）。
这使得我们改造家用电器，使其受程序控制，成为智能设备，甚至接入互联网成为切实可行。

.. warning::
    改造电器伴随着巨大的危险，切勿轻易尝试，请在专业人士的指导下进行。

* :ref:`cpn_relay`

在这里我们仅把使用面包板电源模块供电的简单电路作为例子，展示如何使用relay来控制它。

* :ref:`cpn_power_module`

**Wiring**

首先，搭建一个低压电路，用于控制继电器。
驱动继电器需要较大的电流，因此需要使用三极管，在这里，我们使用S8050。

|sch_relay_1|

|wiring_relay_1|

此处还使用了一个二极管保护电路，其阴极，即有银色色带的一端，接向电源，阳极接向三极管。
这是因为继电器内部拥有线圈，断开电源时线圈产生高于电源电压数倍的自感应电动势，
该二极管会在此时传导电流，线圈和二极管瞬间形成由线圈中存储的能量供电的电路，
从而避免过高的电压将损坏电路上的三极管等器件。

* :ref:`cpn_diode`    
* `Flyback Diode - Wikipedia <https://en.wikipedia.org/wiki/Flyback_diode>`_

此时程序已经可以运行了，运行后会听到 "tik tok" 的声音，这是继电器内部的接触器线圈吸合与断开的声音。

接着我们将受控电路的两端分别接入继电器的3引脚和6引脚。
（以前文所说的由面包板电源模块供电的简单电路为例。）

|sch_relay_2|

|wiring_relay_2|

此时，继电器将可以控制受控电路的通断了。

**Code**

.. code-block:: python

    import machine
    import utime
    
    relay = machine.Pin(15, machine.Pin.OUT)
    while True:
        relay.value(1)
        utime.sleep(2)
        relay.value(0)
        utime.sleep(2)

代码运行后，relay将会每隔两秒切换受控电路的工作状态。
你可以手动注释掉其中一行，进一步明确继电器电路和受控电路之间的对应关系。


**What More?**

继电器的3引脚是常开端，仅在接触器线圈工作时接通；4引脚是常闭端，在接触器线圈为通电时接通。
1与6引脚联通，是受控电路的公共端。

将受控电路的一端从3引脚切换至4引脚，你将能得到恰好相反的工作状态。